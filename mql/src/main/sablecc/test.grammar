Package com.mulesoft.mql.grammar;

Helpers

all = [0 .. 127];
escape_sequence =  '\' ''';
s_char = [all -[''' + ['\' + [10 + 13]]]] | escape_sequence;
expression_character = [all -['\' + ['$' + [',' + '}']]]];
string = s_char+;
var = [['0'..'9']+[['a'..'z']+['A'..'Z']]]+;

Tokens

from = 'from';
as = 'as';
where = 'where';
select = 'select';
new = 'new';
left_curly = '{';
right_curly = '}';
period = '.';
or = 'or';
and = 'and';
equals = '=';
plus = '+';
less_than = '<';
greater_than = '>';
less_than_equals = '<=';
greater_than_equals = '>=';
comma = ',';
single_quote = ''';
double_quote = '"';
basic_var = var;
left_paren = '(';
right_paren = ')';
number = [0-9]+;
whitespace = (' ')+;
string_literal = ''' string ''';

Ignored Tokens

whitespace;

Productions
/* Basic query structure */
query = from [fromvar]:basic_var as [asvar]:basic_var where_statement? select_statement?;

/* Where statement */
where_statement = where where_expression;
where_expression = 
    {simple} where_clause |
    {parens} left_paren where_expression right_paren |
    {or} [left]:where_expression or [right]:where_clause |
    {and} [left]:where_expression and [right]:where_clause ;
where_clause = [left]:where_side comparator [right]:where_side;
where_side = {variable} object_var | {string_literal} string_literal;
comparator = {equals} equals | {lt} less_than | {lte} less_than_equals | {gt} greater_than | {gte} greater_than_equals;

/* Select statement */
select_statement = {select_new} select select_new_item | {select_properties} select select_properties;
select_new_item = new left_curly select_new_item_list right_curly;
select_new_item_list = {list} select_new_item_property comma select_new_item_list | {single} select_new_item_property;
select_new_item_property = basic_var equals [equals_expression]:mvel_expression;
select_properties = basic_var;

/* Java expressions */
mvel_expression = mvel_expression_component
  | {addition} [left]:mvel_expression_component plus [right]:mvel_expression; 
mvel_function = object_var left_paren right_paren; 
mvel_expression_component = {component_string} string_literal 
  | {component_object} object_var
  | {component_function} mvel_function;
  | {component_number} number
  
object_var = {basic}basic_var | {ref} [first]:basic_var period [second]:object_var;
